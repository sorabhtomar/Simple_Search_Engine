type: edu
custom_name: stage5
files:
- name: src/search/Main.java
  visible: true
  text: |
    package search;

    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {
            Scanner scn = new Scanner(System.in);

            String[] words = scn.nextLine().split("\\s+");
            String searchWord = scn.next();

            // idx: index of the "search word"
            // Initialized with an invalid index. In this case, 0 is also an invalid index
            int idx = -1;
            for (int i = 0; i < words.length; i++) {
                if (words[i].equals(searchWord)) {
                    idx = i + 1;
                    break;
                }
            }

            if (idx == -1) {
                System.out.println("Not found");
                return;
            }

            System.out.println(idx);
        }
    }
  learner_created: false
- name: test/SearchEngineTests.java
  visible: false
  text: |
    public class SearchEngineTests {
        public static final String NAMES =
            "Kristofer Galley\n" +
            "Fernando Marbury fernando_marbury@gmail.com\n" +
            "Kristyn Nix nix-kris@gmail.com\n" +
            "Regenia Enderle\n" +
            "Malena Gray\n" +
            "Colette Mattei\n" +
            "Wendolyn Mcphillips\n" +
            "Jim Gray\n" +
            "Coreen Beckham\n" +
            "Bob Yeh bobyeah@gmail.com\n" +
            "Shannan Bob stropeshah@gmail.com\n" +
            "Yer Fillion\n" +
            "Margene Resendez marres@gmail.com\n" +
            "Blossom Ambler\n" +
            "Teri Ledet teri_ledet@gmail.com\n" +
            "Dana Baron baron@gmail.com\n" +
            "Abram Goldsberry\n" +
            "Yer Leopold\n" +
            "Stefania Trunzo\n" +
            "Alexis Leopold\n" +
            "Carlene Bob\n" +
            "Oliver Dacruz\n" +
            "Jonie Richter\n" +
            "Pasquale Gallien gallien@evilcorp.com\n" +
            "Verdie Gentle\n" +
            "Gerardo Strouth gallien@evilcorp.com\n" +
            "Agripina Bob\n" +
            "Latricia Niebuhr\n" +
            "Malena Schommer\n" +
            "Drema Leopold\n" +
            "Heide Payeur\n" +
            "Ranae Digiovanni\n" +
            "Simona Pereira\n" +
            "Nick Digiovanni\n" +
            "Angelita Wigington gallien@evilcorp.com\n" +
            "Elin Gray\n" +
            "Dwain Trunzo\n" +
            "Boris Beiler\n" +
            "Remi Malek fsociefy@gmail.com\n" +
            "Demetria Hostetler gallien@evilcorp.com\n" +
            "Nydia Mcduffie\n" +
            "Florencio Defibaugh\n" +
            "Warner Giblin\n" +
            "Bob Mans\n" +
            "Shu Gray\n" +
            "Kaycee Gray\n" +
            "Victorina Froehlich victory@gmail.com\n" +
            "Roseanne Gray\n" +
            "Erica Radford hisam@gmail.com\n" +
            "Elyse Pauling";
    }
  learner_created: false
- name: test/SimpleSearchEngineTest.java
  visible: false
  text: |+
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.*;

    class TestClue {
        String input;

        TestClue(String input) {
            this.input = input;
        }
    }

    public class SimpleSearchEngineTest extends StageTest<TestClue> {

        public static final String test1 =
            "2\n" +
            "0";

        public static final String test2 =
            "1\n" +
            "qwerty\n" +
            "0";

        public static final String test3 =
            "1\n" +
            "Leopold\n" +
            "0";

        public static final String test4 =
            "3\n" +
            "1\n" +
            "Bob\n" +
            "2\n" +
            "2\n" +
            "1\n" +
            "Leopold\n" +
            "0";

        public static final String test5 =
            "1\n" +
            "@\n" +
            "1\n" +
            "Leopold\n" +
            "0";

        public static final String test6 =
            "0";

        public static final String test7 =
            "1\n" +
            "this text never find some match\n" +
            "0";

        public static final String test8 =
            "1\n" +
            "h\n" +
            "1\n" +
            "gallien@evilcorp.com\n" +
            "0";

        public static final String test9 =
            "4\n" +
            "2\n" +
            "2\n" +
            "1\n" +
            "this text never gonna be matched\n" +
            "1\n" +
            "h\n" +
            "1\n" +
            "gallien@evilcorp.com\n" +
            "0";

        @Override
        public List<TestCase<TestClue>> generate() {

            List<TestCase<TestClue>> tests = new ArrayList<>();

            for (String input : new String[]{
                test1, test2, test3, test4, test5, test6, test7, test8, test9}) {

                tests.add(new TestCase<TestClue>()
                    .setAttach(new TestClue(input))
                    .setInput(input)
                    .addArguments("--data", "names.txt")
                    .addFile("names.txt", SearchEngineTests.NAMES));
            }

            return tests;
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String cR = "\n";
            List<String> outputLines = new LinkedList<String>(Arrays.asList(reply.split(cR)));
            String[] inputLines = clue.input.split(cR);
            String[] reference;
            String[] currentSearchResult;

            reference = SearchEngineTests.NAMES.split("\n");

            //clear the list of unnecessary lines, if any
            List<String> cleanedOutput = new ArrayList<String>();
            for (int i = 0; i < outputLines.size(); i++) {
                if (containsItemFromList(outputLines.get(i), reference)) {
                    cleanedOutput.add(outputLines.get(i).toLowerCase());
                }
            }

            int currentInputLine = 0;
            int currentOutputLine = 0;

            int actionType = -1;

            while (actionType != 0) {
                try {
                    actionType = Integer.parseInt(inputLines[currentInputLine]);
                } catch (NumberFormatException e) {
                    return new CheckResult(false,
                        "The number of menu item must be number!");
                }

                switch (actionType) {
                    case 1:
                        currentInputLine++;

                        String toSearch = inputLines[currentInputLine].trim().toLowerCase();

                        currentInputLine++;

                        List<String> intendedResult = new ArrayList<>();

                        for (String s : reference) {
                            s = s.toLowerCase();
                            if (s.contains(" " + toSearch + " ")
                                || s.startsWith(toSearch + " ")
                                || s.endsWith(" " + toSearch)) {

                                intendedResult.add(s);
                            }
                        }



                        currentSearchResult = new String[intendedResult.size()];
                        for (int i = 0; i < intendedResult.size(); i++) {
                            try {
                                currentSearchResult[i] = cleanedOutput.get(currentOutputLine++);
                            } catch (IndexOutOfBoundsException e) {
                                return new CheckResult(false,
                                    "Seems like you output less than expected. " +
                                        "Either you've lost someone in the printing of all " +
                                        "people, or you haven't printed all the necessary " +
                                        "people in the search.");
                            }
                        }

                        String[] correctOutput = intendedResult.toArray(String[]::new);

                        Arrays.sort(correctOutput);
                        Arrays.sort(currentSearchResult);

                        if (!Arrays.equals(correctOutput, currentSearchResult)) {
                            return new CheckResult(false,
                                "Search result is not equal " +
                                    "to the expected search");
                        }
                        break;
                    case 2:
                        currentInputLine++;

                        List<String> intendedResultAll = new ArrayList<>();

                        for (String s : reference) {
                            s = s.toLowerCase();
                            intendedResultAll.add(s);
                        }

                        String[] userResultAll = new String[intendedResultAll.size()];
                        for (int i = 0; i < intendedResultAll.size(); i++) {
                            try {
                                userResultAll[i] = cleanedOutput.get(currentOutputLine++);
                            } catch (IndexOutOfBoundsException e) {
                                return new CheckResult(false,
                                    "Seems like you output less than expected. " +
                                        "Either you've lost someone in the printing of all " +
                                        "people, or you haven't printed all the necessary " +
                                        "people in the search.");
                            }
                        }

                        String[] correctOutputAll = intendedResultAll.toArray(String[]::new);

                        Arrays.sort(correctOutputAll);
                        Arrays.sort(userResultAll);

                        if (!Arrays.equals(correctOutputAll, userResultAll)) {
                            return new CheckResult(false,
                                "Looks like you're printing " +
                                    "unknown people when you enter option 2.");
                        }
                        break;
                    case 0:
                        return CheckResult.correct();
                    default:
                        currentInputLine++;
                        break;
                }
            }

            return CheckResult.correct();
        }

        private static boolean containsItemFromList(String inputStr, String[] items) {
            return Arrays.stream(items).parallel().anyMatch(inputStr::contains);
        }
    }

  learner_created: false
- name: src/search/Application.java
  visible: true
  text: |
    package search;

    import java.io.File;
    import java.io.FileNotFoundException;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;

    public class Application {
        private static Application app;

        private String[] args;

        // data: holds the value of command line argument/flag/option "--data"
        private String data;

        private Scanner scn = new Scanner(System.in);
        private List<String> rows;

        private Application(String[] args) {
            this.args = args;
        }

        // Lazy Singleton Initialization
        public static Application getApp(String[] args) {
            if (app == null) {
                app = new Application(args);
            }

            return app;
        }

        private void userInput(String[] args) {
            System.out.println("Enter the number of people:");
            int n = Integer.parseInt(scn.nextLine());

            System.out.println("Enter all people:");
            for (int i = 0; i < n; i++) {
                rows.add(scn.nextLine());
            }

            System.out.println();
        }

        private void processRunArguments() {
            int position = 0;
            while (position < args.length) {
                String option = args[position];

                switch (option) {
                    case "--data":
                        data = args[position + 1];
                        position += 2;
                        break;

                    default:
                        System.out.println("Error! Invalid command line arguments!");
                        break;
                }
            }
        }

        private void readInputFile(String filePath) {
             rows = new ArrayList<>();

             try (Scanner scn = new Scanner(new File(filePath))) {
                 while (scn.hasNextLine()) {
                     rows.add(scn.nextLine());
                 }
             } catch (FileNotFoundException e) {
                 System.out.println("File not found!");
             }
        }

        public void run() {
            processRunArguments();
            readInputFile(data);

            boolean exit = false;
            do {
                menu();
                int option = Integer.parseInt(scn.nextLine());
                System.out.println();

                switch (option) {
                    case 1:
                        search();
                        break;

                    case 2:
                        System.out.println("=== List of people ===");
                        display(rows);
                        break;

                    case 0:
                        exit = true;
                        System.out.println("Bye!");
                        break;

                    default:
                        System.out.println("Incorrect option! Try again.");
                        break;
                }

                System.out.println();

            } while (!exit);
        }

        public void menu() {
            System.out.println("=== Menu ===");
            System.out.println("1. Find a person");
            System.out.println("2. Print all people");
            System.out.println("0. Exit");
        }


        private void search() {
            // performing "linear search" on a row of data using "query" (by user)
            System.out.println("Enter a name or email to search all suitable people.");
            String query = scn.nextLine().toLowerCase();

            List<String> result = linearSearch(rows, query);
            display(result);
        }

        private List<String> linearSearch(List<String> rows, String query) {
            List<String> result = new ArrayList<>();

            for (String row : rows) {
                if (row.toLowerCase().contains(query)) {
                    result.add(row);
                }
            }

            return result;
        }

        private void display(List<String> rows) {
            for (String row : rows) {
                System.out.println(row);
            }
        }
    }
  learner_created: true
- name: src/search/utils/Arguments.java
  visible: true
  learner_created: true
- name: src/search/ui/UIManager.java
  visible: true
  learner_created: true
- name: src/search/work/Searcher.java
  visible: true
  learner_created: true
- name: src/search/algos/SearchContext.java
  visible: true
  learner_created: true
- name: src/search/algos/SearchStrategy.java
  visible: true
  learner_created: true
- name: src/search/algos/DefaultSearch.java
  visible: true
  learner_created: true
- name: src/search/work/ConcreteSearcher.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5500#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 25 Jun 2022 15:55:06 UTC
record: 5
